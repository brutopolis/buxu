#!/bin/bash

# this buxu building front-end is a non-essential script meant for linux

# usage function
usage() 
{
    echo "[=°-°=]: usage: $0 [install|install-from|remove|build|run|setup|clean|update|help] [package]"
    echo "[=°~°=]: install: install a package from the repository"
    echo "[=°~°=]: install-from: install a package from a custom repository"
    echo "[=°~°=]: remove: remove a package"
    echo "[=°~°=]: build: user-defined build step"
    echo "[=°~°=]: run: user-defined run step"
    echo "[=°~°=]: setup: user-defined setup step"
    echo "[=°~°=]: clean: user-defined clean step"
    echo "[=°~°=]: update: user-defined update step"
    echo "[=°~°=]: help: show this help message"
    echo "[=°~°=]: package: name of the package to install/remove"
}

# store current path
ORIGIN=$(pwd)

# check if sudo is available
SUDO=sudo
if ! command -v sudo >/dev/null; then
    SUDO=""
fi

# default values
CC="gcc"
REPO="https://brutopolis.github.io/packages"
PACKAGE=""

# action flags
_INSTALL=0
_UNINSTALL=0
_BUILD=0
_RUN=0
_SETUP=0
_CLEAN=0
_UPDATE=0

# read command
case $1 in
install)  { _INSTALL=1; shift; } ;;
install-from) { _INSTALL=1; REPO=$2; shift 2; } ;;
remove)   { _UNINSTALL=1; shift; } ;;
build)    { _BUILD=1; shift; } ;;
run)      { _RUN=1; shift; } ;;
setup)    { _SETUP=1; shift; } ;;
clean)    { _CLEAN=1; shift; } ;;
update)   { _UPDATE=1; shift; } ;;
help)   { usage; exit 0; } ;;
*) 
{
    echo "[=°~°=]: unknown command: $1"
    usage
    exit 1
}
;;
esac

# create local build folder if needed
if [[ ! -d .buxu/bpm ]]; then
    mkdir -p .buxu/bpm
fi

cd .buxu/bpm

# handle install
if [[ $_INSTALL -eq 1 ]]; then
{
    if [[ $# -eq 0 ]]; then
        echo "[=°~°=]: no package specified"
        exit 1
    fi

    for PACKAGE in "$@"
    do
    {
        # remove existing package folder if exists
        if [[ -d "$PACKAGE" ]]; then
            rm -rf "$PACKAGE"
        fi

        mkdir "$PACKAGE"
        cd "$PACKAGE"

        # download package.sh and validate
        curl -sLO "$REPO/$PACKAGE/package.sh"
        if [[ ! -f "package.sh" ]]; then
            echo "[=°~°=]: failed to fetch package.sh"
            exit 1
        fi

        source package.sh

        if [[ -z $FILES ]]; then
            echo "[=°~°=]: no FILES variable found in package.sh"
            exit 1
        fi

        # fetch files
        for file in $FILES
        do
        {
            curl -sO "$REPO/$PACKAGE/$file"
        }
        done

        # run build if defined
        if [[ -n $BUILD ]]; then
            $BUILD
        else
            echo "[=°~°=]: no BUILD command found in package.sh"
        fi

        cd ..
    }
    done
}
fi

# handle remove
if [[ $_UNINSTALL -eq 1 ]]; then
{
    if [[ $# -eq 0 ]]; then
        echo "[=°~°=]: no package specified"
        exit 1
    fi

    for PACKAGE in "$@"
    do
    {
        if [[ -d "$PACKAGE" ]]; then
            rm -rf "$PACKAGE"
            echo "[=°~°=]: removed package $PACKAGE"
        else
            echo "[=°~°=]: package $PACKAGE not found"
        fi
    }
    done
}
fi

# utility: run a function from package.sh if it exists
run_package_function() 
{
    local varname=$1
    local label=$2

    if [[ ! -f "package.sh" ]]; then
        echo "[=°~°=]: no package.sh found"
        exit 1
    fi

    source package.sh

    if [[ -z ${!varname} ]]; then
        echo "[=°~°=]: no $label variable found in package.sh"
        exit 1
    fi

    ${!varname}
}

# call remaining actions if flags were set
if [[ $_BUILD -eq 1 ]]; then { run_package_function "BUILD" "BUILD"; } fi
if [[ $_RUN   -eq 1 ]]; then { run_package_function "RUN" "RUN"; } fi
if [[ $_SETUP -eq 1 ]]; then { run_package_function "SETUP" "SETUP"; } fi
if [[ $_CLEAN -eq 1 ]]; then { run_package_function "CLEAN" "CLEAN"; } fi
if [[ $_UPDATE -eq 1 ]]; then { run_package_function "UPDATE" "UPDATE"; } fi
