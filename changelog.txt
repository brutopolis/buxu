# buxu changelog https://github.com/brutopolis/buxu

(08/07/2025) - version 0.2.0

- bucc no more exists;
- bupm is bpm once again;

(12/06/2025) - version 0.1.9

- it is now so easy that we removed the build.sh script, a simple gcc -o buxu buxu.c -ldl is enough to build it, the rest is just copy and paste where you need;
- some updates to match bruter 0.8.8;

(10/06/2025) - version 0.1.8a

- now you can access args using the list args inside bruter;

(27/05/2025) - version 0.1.8

- updated to use br and bruter properly, as now they use their own prefixes and are header-only libraries;

(19/05/2025) - version 0.1.8

- all macros are now uppercase;

(17/05/2025) - version 0.1.7

- everything related to ibr is now in a separated repository: https://github.com/brutopolis/br
- cli.c and buxu.h merged, and now is called buxu.c;

(10/05/2025) - version 0.1.6

- buxu language is now called ibr(intermediate bruter representation);

(09/05/2025) - version 0.1.5

- InitFunction removed;
- instead of -l name, now is -lname;
- context_call and such has beem merged into bruter;
- updated to meet bruter 0.8.5;
- macro function renamed to list_function and is now part of bruter;

(06/05/2025) - version 0.1.4

- fixed context_call;
- added some functions to precompile and deal with compiled "bytecode";
- not a real bytecode though, not meat to be saved to a file or something like that, 
- bruter is not meant to be bytecoded, the language structure change so much during runtime that it would be impossible to create a bytecode that would work for all the cases;
- be careful with precompiled code, i mean, you should be careful with EVERYTHING in buxu, its meant as a unsafe language by design;
- but precompiled code is even more unsafe, as the indexes are not automatically updated, and, bruter/buxu doesnt really have types to check if the code is correct or not;
- you can see how it works in the stdlib 'repeat' function, very easy, as everything in buxu;

(01/05/2025) - version 0.1.3

- from this version and on everything that not a list_* is not part of bruter anymore;
- everything about language eval and parsing is now part of buxu;
- arg* functions can now access the function pointer, using arg*(-1);
- everything updated to meet bruter 0.8.4 needs;

(24/04/2025) - version 0.1.0

- from this version and on bruter and all it related stuff will be under the brutopolis organization on github;
- examples updated;
- cli updated to match bruter 0.8.3;

(21/04/2025) - version 0.0.9

- bpm install and remove now supports multiple packages;
- buxu is now updated to meet bruter 0.8.2 needs;
- cli doesnt register filepath anymore;
- as strings are now part of the value list instead a separated pointer, strpointer example was removed;
- cli bug fixes;
- new commands help and install-from;

(20/04/2025) - version 0.0.8

- new_function renamed to add_function;
- in-progress buxu package manager(bpm);
- default extension changed from .so to .brl;
- file functions moved to header;
- libs moved to a separated repository;

(14/04/2025) - version 0.0.7

- everything that was annoying in bruter have been reworked;
- updated to meet bruter 0.8.1 needs;
- std rewrite from ground once again;
- for now, load function will only be able to load from lib file path, no smart lib search for now;
- tigr and dyc are outdated as hell, but this is not meant as a release version;
- maybe i should create a package manager and integrate it here, moving the packages itself to a specific repository for them;

(13/04/2025) - version 0.0.6

- removed some macros that were meant to be usend in msvc, but we will focus on gcc's standard for now, so, use mingw if on windows;
- new typing system;
- with the new typing system prints functions are now one;
- return fixed;

(09/04/2025) - version 0.0.5

- rewrite from scratch in progress;
- new macro register_function;
- dyc.c is back;
- file functions are now in cli.c;
- move some internal functions from cli.c into a new file called buxu.c might be a good idea;

(06/04/2025) - version 0.0.4

- --cc option replaced by --compiler and -cc;
- --version and -v options now print both bruter and buxu version;
- new option for build.sh --branch it specify the bruter branch to use, it defaults to main;
- std math functions are now under math.c;
- std array functions are now under array.c;
- std condition functions are now under condition.c;
- README.me updated;

(05/04/2025) - version 0.0.3

- buxu is now separated from bruter, while bruter is the vm, buxu is a set of tools that provide: 
  - a cli;
  - a stdlib;
  - bucc, a tool to compile bruter c files into bruter-compatible shared libraries;
  - buxu's build script, it builds buxu and bruter, can install and uninstall them, can debug etc;

(01/04/2025) - version 0.0.2

- lists macros now do use memmove instead of moving one by one;
- TYPE_LIST removed;
- new type in stdlib TYPE_ARRAY;
- TYPE_ARRAY treat arrays as a number element on the stack as list, the number is the amount of elements after it are part of the array;
- functions list, pop, push, shift, unshift, insert, remove, split, concat, replace, swap, find and sub were removed;
- priority removed;
- new function array;
- new function resize;
- new function index;
- NULL declaration moved to make_vm;
- NULL is now a null;
- load can now load lib from the lib paths;
- new variable file.path;
- new functions clear and fill;
- new cli option -p | --path to add a path to the lib paths;
- function "$" removed;
- function "#" removed;
- some new examples;

(24/03/2025) - version 0.0.1a

- new function loop_forever;
- new function int;
- all the loop functions now can be interrupt the loop without returning if return -2;
- Value union extended with new properties: u8, u16, u32, u64, i8, i16, i32, i64, f32, f64;
- union.byte renamed to union.u8;
- fixed hash_find, it was returning the stack index instead of the hash index;
- vm->hashes has now been splited into vm->hash_names and vm->hash_indexes;
- hash macro removed;
- fixed some memory leaks;
- fixed some bugs;
- some optimizations;

(23/03/2025) - version 0.0.1

- main.c renamed to cli.c;
- c_list.h merged into buxu.h;
- buxu created, all other logs before this are related to bruter specifically;
- build.sh now builds libbuxu.a and libbuxu.so;
- build.sh now have a --install option, it will install libbuxu.so to /usr/lib, buxu and buxuc to /usr/bin, and the headers to /usr/include;
- build.sh now have a --uninstall option, it will uninstall libbuxu.so from /usr/lib, buxu and buxuc from /usr/bin, and the headers from /usr/include;
- theres also --install-at path and --uninstall-from path options;
- build.sh now new options --no-static and --no-shared, as static and shared are built by default and can be found ./build/;
- --lib is no more a thing, use buxuc instead, it does the same thing, but no embed files;
- buxuc is now as simple as it can be;
- you can find bruter in its repository https://github.com/jardimdanificado/bruter
- cli.c has new option --load path | -l path, to load a buxu lib;
- cli.c has new option --eval code | -e code, to evaluate a code;
- in std all the #func renamed to just func;
- file.read and file.write renamed to read and write;
- all the func: were also renamed to just func;
- std loop functions optimizations removed, for simplicity, maybe another optimization might be done in far future;
- include folder removed, buxu.h is now under src/;
- bitwise functions added to std_math;
- experimental tigr(https://github.com/erkkah/tigr) wrapper for buxu added;
- list_find renamed to list_ocurrences;
- new macro list_find;
- all examples updated;
- some README updates;
- lots of cleanup;
- some fixes;

-- everything prior to this was originally part of bruter;