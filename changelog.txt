# buxu changelog https://github.com/jardimdanificado/buxu

(30/03/2025) - version 0.7.9

- lists macros now do use memmove instead of moving one by one;
- TYPE_LIST replaced by TYPE_ARRAY;
- TYPE_ARRAY treat arrays as a number element on the stack as list, the number is the amount of elements after it are part of the array;
- functions list, pop, push, shift, unshift, insert, remove, split, concat, replace, swap, find and sub were removed;
- priority removed;
- new function array;
- new function resize;
- new function index;
- NULL declaration moved to make_vm;
- load can now load lib from the lib paths;
- new variable file.path;
- new functions clear and fill;
- new cli option -p | --path to add a path to the lib paths;
- deplace "($ ...)" removed;
- 'return' renamed to ':' again;
- some new examples;

(24/03/2025) - version 0.7.8a

- new function loop_forever;
- new function int;
- all the loop functions now can be interrupt the loop without returning if return -2;
- Value union extended with new properties: u8, u16, u32, u64, i8, i16, i32, i64, f32, f64;
- union.byte renamed to union.u8;
- fixed hash_find, it was returning the stack index instead of the hash index;
- vm->hashes has now been splited into vm->hash_names and vm->hash_indexes;
- hash macro removed;
- fixed some memory leaks;
- fixed some bugs;
- some optimizations;

(23/03/2025) - version 0.7.8

- main.c renamed to cli.c;
- c_list.h merged into buxu.h;
- buxu created, all other logs before this are related to bruter specifically;
- build.sh now builds libbuxu.a and libbuxu.so;
- build.sh now have a --install option, it will install libbuxu.so to /usr/lib, buxu and buxuc to /usr/bin, and the headers to /usr/include;
- build.sh now have a --uninstall option, it will uninstall libbuxu.so from /usr/lib, buxu and buxuc from /usr/bin, and the headers from /usr/include;
- theres also --install-at path and --uninstall-from path options;
- build.sh now new options --no-static and --no-shared, as static and shared are built by default and can be found ./build/;
- --lib is no more a thing, use buxuc instead, it does the same thing, but no embed files;
- buxuc is now as simple as it can be;
- as buxu is a direct fork of bruter, we will keep the same versioning, ans the same changelog, but from now on, it will be related to buxu;
- examples renamed from *.br to *.bu;
- you can find bruter in its repository https://github.com/jardimdanificado/bruter
- cli.c has new option --load path | -l path, to load a buxu lib;
- cli.c has new option --eval code | -e code, to evaluate a code;
- in std all the #func renamed to just func;
- file.read and file.write renamed to read and write;
- all the func: were also renamed to just func;
- std loop functions optimizations removed, for simplicity, maybe another optimization might be done in far future;
- include folder removed, buxu.h is now under src/;
- bitwise functions added to std_math;
- experimental tigr(https://github.com/erkkah/tigr) wrapper for buxu added;
- list_find renamed to list_ocurrences;
- new macro list_find;
- all examples updated;
- some README updates;
- lots of cleanup;
- some fixes;

(21/03/2025) - version 0.7.7d

- stdbool.h and stdint.h are now included in the header;
- new macro "Byte", essentially a uint8_t;
- bruter .so files are now loaded RTLD_GLOBAL, to make things faster;
- main.c: vm and args are now global, that make easier to free them, in exceptions;
- dyc.c removed;

(15/03/2025) - version 0.7.7c

- bruterc, a shell script with embedded bruter files, for compiling libs;
- bruterc is just a wrapper for build.sh --lib with embedded files to be used from anywhere;
- new option --no-bruterc in build.sh, if you just want to compile the interpreter;
- leak when have two of more libs loaded fixed;

(11/03/2025) - version 0.7.7b

- dl.open renamed to load;
- dl.close renamed to unload;
- dl.list is no more a thing, things are dealt internally now;
- build.sh trimmed down;
- some README updates;
- no more folder lib;
- no more arduino setup as its now even easier to include bruter in any project;
- some examples updated;

(11/03/2025) - version 0.7.7a

- dycc is back;
- no more contexts;
- no more commentary operator;
- no more (@@ ), use (@ );
- no more memory operator (@);
- every complext thing removed in favor of simplicity;
- no more string formatter;
- bruter is now meant mainly as a companion to C, where you can easily develop a proper language with lib;
- std will not be considered as a part of bruter anymore;

(06/03/2025) - version 0.7.7

- removed the @ operator fore recursion;
- removed spread;
- no more "function" (: (: ) (: ) );
- no more "lookup" (: (: ) (: ) );
- string now have it own scope and receive args as ...;
- : is list: again;
- (: ) operator removed;
- interpreter is not replaceable anymore;
- repl is no more part of bruterlib, neither is a function anymor, it is only avaliable in the main.c now;
- lots of fixes;
- a lot of cleanup;
- some optimizations;
- #rename is back;

(06/03/2025) - version 0.7.6b

- = operator removed, use the @ operator;
- parenthesis now have the original behavior again;
- special_space_split regret to original behavior;
- arduino files updated;
- removed the lookup function, use name@name2 instead;
- added support for @number@name@number@name... in the @ operator;
- if name1@name2 is not found it will create the element, and the variable if needed;
- if name@number is not found it will create all the elements until the number and the variable if needed;
- some fixes;

(05/03/2025) - version 0.7.6a

- string char access fixed;
- std conditions now does compare integers too, when type is not a number;
- @0 is now type.any instead of type.number;
- fixed some function args related problems;
- fixed if undeclared in std;
- fixed string format '$' related problems and added some error messages;
- new experimental hash operator =, it beahave as #new if no hash is found, and as set: if a hash is found;
- usage: name=value or name=(fn ...) or name@number@name=value, it should have no spaces between the name and the operator;

(03/03/2025) - version 0.7.6

- this version gives more independence to the interpreter, it allow it to do functions and switches without the need of the std;
- std files unified;
- defining @0 as NULL is now done in the std;
- make_int_list, make_string_list and make_char_list removed;
- != and == now dont just compare the pointers/integers, but compare the values;
- function function removed, use : instead, it does exactly the same thing;
- interpreter behavior changed, function now instead of (: varnames... "code") is (: (: varnames...) "code");
- new kind of function, the lookup (table): (: (: varnames...) (: values...) default);
- the third element of the lookup table is the default value, if the lookup fails it will return it;
- format function removed, "" and '' strings now support escape codes using \whatever and variables using $varname;
- the new formatter also suport $(whatever "code" etc);
- you can now use varname@index to get the element at the index;
- you can now use varname@name to get the element named "name" from a lookup table;
- you can also use varname@name@index... etc;
- now conditions instead of return @1 it will return the first argument, except in case the first argument is @0, in this case it will look the other args, if all are zero it will return @1 instead;
- in case of false it still returns @0;
- removed string_split.br example, it can be done manually;
- new delimiter (: ) to create lists, list was the only type beside type.any that needed a function to be created, now it can be done directly;
- script calls doesnt have a own scope anymore, thats now a exclusive behavior of functions;
- math functions now work with integers as well;
- dynamic libraries are now a thing, just create a regular bruter lib and load with dl.open, bruter will do the rest;
- new functions dl.open and dl.close, they are the only functions that arent part of the std, they are registered in main.c, useful when you compile the interpreter withou any lib;
- new build.sh flag: --clean, it ignores all files in lib/ and compile a libless interpreter;
- no more --exclude in build.sh, use --clean, or simply delete the files from lib/ before compiling;

(19/02/2025) - version 0.7.5c

- all std functions are now documented under README.md;
- TYPE_FUNCTION removed, use TYPE_LIST instead;
- TYPE_BUILTIN removed, use TYPE_LIST instead;
- ifelse removed, use if instead;
- condition "not" removed;
- function "do" removed;
- function "help" renamed to "ls.hash" again;
- some examples updated;
- some optimizations;
- some cleanup;
- some fixes;

(14/02/2025) - version 0.7.5b

- new function #priority, it reorder the hash in the hashes list, the first argument is the hash name, the second is the priority, 0 is the max priority, if it receive only 1 arg it sets the minimum priority, which is 10 by default, if no args are passed it will return the priority of the hash;
- some memory leaking fixed;
- some optimizations on loops, while is about ~50% faster now, and repeat is about ~20% faster;
- #new still working for re-setting a hash, but is not recommended unless you know exactly what you are doing, some optimizations now expect static hashes;
- some internal systems were splited in minor parts and some changed behavior, just internal stuff;
- new file c_list.h;
- all stack_* functions were renamed to list_* instead, usage is now simpler and you dont need to allocate the list anymore, list_init does it now;
- new internal list macro: list_fast_remove, is a swap and pop, a faster list_remove, that doesnt mantain the order;
- new internal list macro: list_double, it reallocs the list to double its size;
- new internal list macro: list_half, it reallocs the list to half its size;
- repeat loop now can be interrupted with return just like while;
- InternalFunction structure removed, functions are now a bruter list with strings, the last is the code, the other are the argument names;
- std_inplace.c removed;
- all math functions are now inplace, they dont create a new variable anymore, they just set the first argument, use deplace if you want a non destructive operation;
- ++ and -- removed, use + and - instead, they're now just as fast as ++ and --;
- new functions: min and max;
- some optimizations in math functions;
- new function "$" aka deplace, it make destructive operations non-destructive(e.g. #new "c" ($ + a b) will not change a);
- endless args are now under "..." instead "etc";
- os.time and os.clock now are now called time and clock;
- some examples updated;
- cast is now inplace;

(01/02/2025) - version 0.7.5a

- lots of documentation written on README.md;
- mem.next removed, use mem.delete instead;
- new_var doesnt clear the variable anymore;

(31/01/2025) - version 0.7.5

- if a string is the first argument of the args stack, it will run as a script;
- all ":function" are now "function:";
- "list" is now "list:";
- removed TYPE_INTEGER, TYPE_OTHER and TYPE_NIL;
- new type TYPE_ANY, it is essentially the TYPE_INTEGER, but if the value is 0 it will be treated as nil, you can use it to store any type(like TYPE_OTHER);
- removed "or" function, you can replicate it with bruter code;
- removed "#set" and "#rename";
- new function "#new", just like #set but it will always create a new hash, deleting the existing one before, keep that in mind;
- the internal function "hash_set" also does not re-set the hash anymore, it have the same behavior as "#new";
- some math functions removed: abs, pow (the easy ones);
- those math functions can be found in bruter example/math.br, but written in bruter;
- new function cast to convert types;
- removed to.int, to.float and string.to.number functions, use cast instead;
- type.set renamed to pun;
- type.get renamed to type;
- strings can now be spread;
- string.split removed, use split: instead;
- string.set removed, use set: instead;
- string.format renamed to format;
- function ls.types removed;
- function ls.hash renamed to help;
- new math functions: sin, cos, tan;
- removed some file functions: file.rename, file.exists, file.size, file.delete and file.copy, use file.read + file.write (or system) instead;
- removed dofile function, use (do (file.read "file.br")) instead;
- new examples: each.br and math.br;
- hashes must now be explicitly deleted, if a new variable is created in the same memory slot the hash will not be deleted anymore;
- new lib std_inplace.c;
- std.c splited;
- new libs std_type.c, std_math.c, std_condition.c;
- function replace.all: removed;
- some optimizations;
- some cleanup;

(24/01/2025) - version 0.7.4

- type.set fixed;
- new operator: @name, it returns the index of the hash as number value, replacement for gindex function;
- gindex removed;
- tree-walking math interpreters removed;
- new function to.int;
- new function to.float;
- removed if.is, ifelse.is and while.is, use if, ifelse and while instead;
- comments are leaking no more;
- sector functions removed;
- removed 'is' function;
- removed mem.len, list.last, list.len, string.len;
- all hash functions renamed to #name instead of hash.name;
- all list functions renamed to :name instead of list.name;
- list functions now deal also with strings and global scope also;
- add, sub, mul, div, mod, incr, decr renamed to +, -, *, /, %, ++, --;
- no more group function use :sub instead;
- new function scan, it always return a string, only avaliable in os;
- removed mem.swap, mem.push, mem.unshift, mem.shift, mem.pop, mem.insert, mem.remove, mem.set and mem.get, use :push, :unshift, :shift, :pop, :insert, :remove, :set and :get instead;
- "fn" is now "function";
- removed "each";

(18/01/2025) - version 0.7.3c

- some README updates;
- some important fixes;
- some simplification;
- there is no more packages folder, just put the folder you want as package inside bruter/lib/ and it will be treated as a package(see lib/example);
- index.html and bruter.js are now generated by build.sh;
- compile a interpreter with embedded script now is compile along with the interpreter, you can find it at build/bruter_out, build/bruter still the interpreter;
- main_exec.c merged with main.c, which can now be compiled with -DBRUTER_EXECUTABLE;

(17/01/2025) - version 0.7.3b

- bruter interpreter can receive args now, they are store under file.args;
- bruter.a is now libbruter.a(for obvious reasons);
- build.sh rewritten;
- new command: "system";
- bpm removed, maybe it was a bad idea, at least in this repo;
- group function fixed;

(14/01/2025) - version 0.7.3a

- bpm fixes;
- new function inplace, just like math, but inplace;
- new function string.set;

(11/01/2025) - version 0.7.3

- minor changes;
- README.md updated;
- experimental bruter "package manager": bpm;
- wasm_wrapper.c merged into bruter.c;
- bruter can now receive some arguments from the command line, use -h to see them;
- new std functions for conditions, brl_std_equals, brl_std_not_equals, brl_std_greater_than, brl_std_less_than, brl_std_greater_or_equals, brl_std_less_or_equals, brl_std_and, brl_std_or, brl_std_not, brl_std_xor;
- condition functions now does return @0 or @1, it does NOT create a new variable, keep that in mind;
- reduced std_group operators to 4: to, from, + and -;
- new std functions: std_loop_while_is, std_condition_if_is, std_condition_ifelse_is;
- new lib: pkg, used to deal with package.br file;

(04/01/2025) - version 0.7.2

- experimental web (wasm) support, set $EMCC to emscripten path when calling build.sh, it will create the folder build/web;
- experimental WASI support, set $WASI to wasi path when calling build.sh, it will create the file build/bruter.wasm;
- every build/prepare script have been merged into build.sh, use $INO and $DEBUG;
- src is now copied to build/ instead copying it contents to include/
- build instructions are now avaliable at README.md;

(28/12/2024) - version 0.7.1a

- removed free_var function;
- removed (:function) operator;
- removed ($function) operator;
- removed direct_interpreter function(merged with default_interpreter again);
- renamed stack_move macro to stack_swap;
- new macro stack_reverse;
- stack_pop is now default instead of stack_shift, reverse the stack before if needed;

(27/12/2024) - version 0.7.1

- new tree-walking math interpreter for indexes;
- new function: group;
- new operator, spread: ...;
- @: operator removed, use group + spread instead;
- new way to call functions: ($function ...), where the rest of the line is treated as a single string and passed as first argument;
- bruter code can be run inside math, index, and condition interpreters using (:function etc);
- no more @+, @-, @> and @< operators, use group function instead;

(24/12/2024) - version 0.7.0

- no more @: operator;
- new operators @+, @-, @> and @<;
- no more (//) delimiter, use // instead;
- dycc.c removed, it will be a avaliable in a separated repository soon;
- register_* functions removed;
- spawn_* functions renamed to register_*;
- arduino code in main.c completely updated;
- new local context system;
- new function system;
- new condition system, using tree-walking;
- removed old condition functions;
- new tree-walking math function;

(17/12/2024) - version 0.6.9

- global.* are now part of std.mem as mem.*;
- string delimiter changed from (.) to (@@);
- to keep it simple, do commmand does not deals with scopes or args anymore, its just a eval;
- some new macros, check bruter.h;
- std.c lib rewritten using the new macros;
- some std functions fixed;
- default_parser renamed to parse;
- no more vm->parse;
- rewritten everything related to temporary variables;
- math functions fully rewritten, some removed;
- some cleanup, about 1k lines removed;
- some example removed;
- some README updates;
- this is probably the biggest update so far, lot of code rewritten and removed, yet, it almost dindt broke the api.

(09/12/2024) - version 0.6.8

- new function set global.*;
- new std variable: local, works as a context, its defined each time "do" is called and is destroyed when the function ends, it is a default list, so you can manipulate it with list functions, it also save the pointer to the last local if there was one;
- new function default_interpreter;
- new function default_parser;
- interpret is now vm->interpret and can be replaced;
- parse is now vm->parse and can be replaced;
- dyc is now dycc(dynamic C compiler), which make more sense.
- new example stacky.br;
- new example lib stacky.c

(27/11/2024) - version 0.6.7a

- minor changes;
- no more direct tcc functions(tcc.*), use dyc functions instead;
- if dyc.new receive 2 arguments, the first one will be the extra code(any c code that will be added before the new function), the second one will be the function code;
- some examples updated;
- fixed mem functions not being initialized;
- new function dyc.include, it includes a C file just like a builtin library and return a handler to it, so you can delete it later(it will not delete the hashes created by it, be careful);

(24/11/2024) - version 0.6.7

- renamed all lib functions putting the brl_ prefix to it;
- some cleanup done on header;
- removed os.sleep;
- merged mem.c and os.c into std.c;
- renamed tcc.c to dyc.c (dynamic c);
- dyc.c now has a copy of the header;

(22/11/2024) - version 0.6.5a

- some examples updated;
- new function tcc.add.symbol;

(22/11/2024) - version 0.6.5

- no more direct commands, everything in bruter must be optional, so hardcoded commands are not a thing anymore;
- new lib tcc.c, to compile and run c code on the fly;
- new alias to IntList*: Args;
- (. ) is now a string delimiter;
- (// ) is now a comment delimiter;
- 'repeat', 'while' and 'each' are now separated from 'do';
- processes are no more a thing, they will be back, but in far future(uncomment it from os.c if you want to use it, should work but not officially supported for now);

(12/11/2024) - version 0.6.4b

- fixed the seg fault when calling direct commands without hashtag;
- multiloops.br updated;
- minor change in direct help messages;

(09/11/2024) - version 0.6.4a

- some README updates;
- print functions for bytes and bits added, (..p index) and (...p index);
- removed vscode-extension, it will be moved to other repository;

(09/11/2024) - version 0.6.4

- direct commands (.a args...) are now a thing, they are faster than libs and are hardcoded in the interpreter, can only work with integers;
- direct byte commands (..a args...), a subset of direct commands for bytes, also hardcoded in the interpreter;
- direct bit commands (...a args...), a subset of direct commands for bits, also hardcoded in the interpreter;
- comments are now possible using direct (.# comment);
- removed raw.c, direct commands does the same job, and are faster; 
- new function mem_next;
- new function repl;
- new function direct_parser;
- new function direct_byte_parser;
- new function direct_bit_parser;
- new function std_gindex;
- new exemple pure.br;
- math functions now set result to the first argument, instead of creating a new one;
- readfile and writefile moved from os.c to bruter.c;
- print_element moved from std.c to bruter.c;
- some optimizations;
- build files updated;

(03/11/2024) - version 0.6.3

- math functions fixed;
- new function raw_bytes_set;
- std_math_increment and std_math_decrement can now receive endless amount of arguments, and doesnt return anything anymore;
- loop examples updated;
- some optimizations;

(02/11/2024) - version 0.6.2e

- minor changes;

(01/11/2024) - version 0.6.2d

- new function os_time_now(os.time);
- new function os_time_clock(os.clock);
- new function os_time_sleep(os.sleep);

(01/11/2024) - version 0.6.2c

- TYPE_INTEGER is now a thing;
- new example added;

(31/10/2024) - version 0.6.2b

- minor fixes;
- new function std_hash_get;

(31/10/2024) - version 0.6.2a

- some byte related fixes;

(31/10/2024) - version 0.6.2

- removed std_eval, use std_do instead;
- removed std_loop_repeat, use std_do instead;
- removed std_loop_while, use std_do instead;
- hash.set now does auto hold the value;
- @ operator changed a bit;
- math functions now can receive endless amount arguments;
- string functions now can receive endless arguments;
- list functions now can receive endless arguments;
- new function mem_swap;
- new function mem_sector_swap;
- new type TYPE_RAW;
- pointers as printed as integer now instead of hex;
- std_string_split fixed;
- std_string_format extended;
- added configurable EXCLUDE to build.sh and build-debug.sh;
- new lib raw.c;
- new function raw_byte_set;
- new function raw_byte_get;
- new function raw_byte_add;
- new function raw_byte_sub;
- new function raw_integer_add;
- new function raw_integer_sub;
- new function raw_integer_mul;
- new function raw_integer_div;
- new function raw_integer_mod;
- new function raw_from_float;
- new function raw_to_float;
- new function raw_from_string;
- new function raw_to_string;
- new function raw_from_bytes;

(28/10/2024) - version 0.6.1

- @ operator can now be used to get a segment of the stack, @: will get the whole stack, @:5 will get the first 5 elements, @5: will get all elements from the 5th to the end, @5:10 will get all elements from the 5th to the 10th;
- some fixes;
- new function use_var;
- new function mem_use;
- new function mem_unuse;
- new function mem_segment_new;
- new function mem_segment_copy;
- fixed repl end message;
- renamed mem_edit to mem_set;

(27/10/2024) - version 0.6.0

- some README updates;
- no more prototypes;
- some fixes;
- some optimizations;
- repl doesnt seg fault when try to call a non existent function anymore;
- new folder libr/ for bruter libraries;
- new file libr/lazy.br;
- new file example/functions.br;
- new function std_do, a replacement for std_function, works like eval, but create a list with the arguments;
- new function os_file_delete;
- new function os_file_exists;
- new function os_file_rename;
- new function os_file_copy;
- new function os_file_size;
- new function byte_edit;
- new function byte_get;
- fixed list.remove;
- moved all memory related functions to mem.c;
- renamed std_file_read to os_file_read;
- renamed std_file_write to os_file_write;
- renamed std_include to os_dofile;
- renamed std_repl to os_repl;
- renamed std_process_fork to os_process_fork;
- renamed std_process_terminate to os_process_terminate;
- renamed std_process_host_send to os_process_host_send;
- renamed std_process_host_receive to os_process_host_receive;
- renamed std_process_child_send to os_process_child_send;
- renamed std_process_child_receive to os_process_child_receive;

(26/10/2024) - version 0.5.9c

- lists are back;
- removed array.c;

(24/10/2024) - version 0.5.9b

- type.array is now a thing;
- removed integer.c;

(23/10/2024) - version 0.5.9a

- some fixes;
- some optimizations;
- less allocations;

(22/10/2024) - version 0.5.9

- arduino related fixes;
- removed TYPE_LIST;
- removed TYPE_FUNCTION;
- lists are not a std type anymore;
- functions are not a std type anymore;
- removed all list related functions;
- removed all function related functions;
- renamed function std_io_ls to std_io_ls_all;
- new function std_io_ls_temp;
- new function std_io_ls_free;
- new function std_io_ls_type;
- new function std_io_ls_hash;
- new function array_new;
- new function array_fill;
- new function array_set;
- new function array_get;
- new function array_length;
- new function array_resize;
- mew lib array.c;
- new lib integer.c;
- new lib prototype.c;
- reworked string.split to use array instead of list;
- prototype moved into separated library apart std;
- some examples updated;
- some README updates;

(19/10/2024) - version 0.5.8b

- new function mem.copy;
- TYPE_OTHER is not automatically unallocated anymore, you must do it manually dependending on your use;
- moved process_t to os.c;
- Value.process is no more;
- minor fixes;

(19/10/2024) - version 0.5.8a

- new function registerBuiltin;
- new function registerFunction;
- new function registerNumber;
- new function registerString;
- new function registerList;
- new library lib/example.c added;

(19/10/2024) - version 0.5.8

- new build system;
- build.sh updated;
- lib system implemented, now is simple to bundle native functions with the interpreter(see lib/);
- removed pthreads and everything related to it, we need to keep it simple, btw, now is very easy to implement it as an native lib if the user need so;
- removed TYPE_THREAD;
- removed TYPE_PROCESS, use TYPE_OTHER instead;
- as those types are no more a part of the language, they cannot be automatically unallocated by the interpreter anymore, so you must do it manually using lib specific specific functions;

(10/10/2024) - version 0.5.7d

- some thread related leaks fixed;

(09/10/2024) - version 0.5.7c

- some new examples;
- some threads related leaks fixed;

(07/10/2024) - version 0.5.7b

- removed function std_thread_await;
- renamed std_thread_join to std_thread_await;
- arduino file updated and tested.
- new function std_thread_transfer_push;
- new function std_thread_transfer_unshift;
- new function std_thread_transfer_shift;
- new function std_thread_transfer_pop;
- new function std_thread_transfer_insert;
- new function std_thread_transfer_remove;

(04/10/2024) - version 0.5.7a

- some minor fixes;
- some README updates;
- renamed create_process to fork_process;
- moved std_thread functions to std_os, not linux exclusive anymore(unlike std_process);

(03/10/2024) - version 0.5.7

- some README updates;
- new function permanent_thread;
- new function thread_destroy;
- new function make_thread_arg;
- new function std_thread_send;
- new function std_thread_join;
- new function std_thread_await;
- new function std_thread_create;
- new function std_thread_destroy;
- renamed std_process_terminate to std_process_destroy;
- renamed terminate_process to process_destroy;
- will implement a std way to get values from threads next;

(29/09/2024) - version 0.5.6

- some README updates;
- removed std_get;
- reintroduced @ operator, but direct reference to indexes;
- new function init_hash;
- new function std_hash_set;
- new function std_hash_get;
- new function std_hash_delete;
- new function std_type_set;
- new function std_type_get;
- new function std_loop_repeat;
- new function std_loop_while;
- new function std_mem_hold;
- new function std_mem_unhold;
- new function std_mem_keep;
- new function std_mem_rebase;
- new function std_mem_clear;
- new function std_mem_edit;
- new function std_mem_collect;
- new function std_mem_length;
- new function std_mem_delete;
- new function std_list_set;
- new function std_string_to_number;
- new function std_process_await;
- new variable type.size;
- new variable type.nil;
- new variable type.number;
- new variable type.string;
- new variable type.list;
- new variable type.function;
- new variable type.builtin;
- new variable type.process;

(27/09/2024) - version 0.5.5a

- removed function std_include;
- build.sh now compiles the static bruter library also;
- compiled files now go on build/ instead of bin/;

(27/09/2024) - version 0.5.5

- some README updates;
- some vscode extension updates(belive it or not);
- new function std_string_format;
- new function str_replace_all;
- new function std_string_replace_all;
- new function std_repeat;

(26/09/2024) - version 0.5.4b

- fixed some memory leaks in multiprocessing;
- no more exec's, everything is freed properly now;
- process.fork can now receive a string as the process name, if a name provided it wont return the process;
- process.fork now check if it is in child;

(26/09/2024) - version 0.5.4a

- some README updates;
- deleted multiprocess.c;
- new file std_linux.c;
- new function init_linux;
- moved all multiprocess.c functions to std_linux.c;

(26/09/2024) - version 0.5.4

- renamed TYPE_OTHER to TYPE_PROCESS;
- new file std_os.c
- new file multiprocess.c
- new struct process_t;
- new function init_std_os;
- new function fork_process;
- new function terminate_process;
- new function send_dynamic_string;
- new function receive_dynamic_string;
- new function std_process_fork;
- new function std_process_terminate (avoid it, prefer std_delete);
- new function std_process_host_send;
- new function std_process_host_receive;
- new function std_process_child_send;
- new function std_process_child_receive;
- moved std functions that dont work on arduino to std_os; 
- moved std file functions to std_os;
- added a pointer to process type in the Value union;
- the multiprocess is not meant to be used on arduino, if on windows you will need to compile with cygwin or such, because of the fork function;

(23/09/2024) - version 0.5.3

- new function collect_garbage;
- new function std_collect, use it just when you lose a held variable;
- new function std_math_increment;
- new function std_math_decrement;
- benchmark/ created under example/;
- single quotes are now allowed as string delimiter;

(22/09/2024) - version 0.5.2

- prototype library added(experimental);
- new function std_prototype_copy;
- new function std_prototype_compare;
- new function std_prototype_hold;
- new function std_prototype_unhold;
- new function std_import(standalone only);
- minor leak fixed;
- renamed std_rm to std_delete;

(21/09/2024) - version 0.5.1a

- some README updates;
- added a condition to prevent the interpreter from crashing after unusing a temp variable;

(21/09/2024) - version 0.5.1

- renamed TYPE_FUNCTION to TYPE_BUILTIN;
- renamed spawn_function to spawn_builtin;
- created TYPE_FUNCTION for functions written in bruter;
- new function spawn_function for functions written in bruter;
- new function print_element;
- new function std_function;
- simplified function std_print;
- simplified function std_ls;

(18/09/2024) - version 0.5.0a

- TYPES order reorganized;
- removed TYPE_ERROR;

(17/09/2024) - version 0.5.0

- some README updates;
- some changes made in std_edit to prevent memory leaks;
- vm.empty renamed to vm.unused;
- TYPE_UNUSED removed;
- removed function std_sweep;
- removed function std_loop_repeat;
- removed "!" operator;
- renamed "~=" operator to "!=";
- renamed std_loop_while to std_while;
- renamed std_comment to std_ignore, "//" operator to "#";
- string is now delimited with double quotes;
- interpreter does not deallocate unused args anymore;

(16/09/2024) - version 0.4.9a

- build.sh renamed to build-debug.sh;
- created build.sh;

(15/09/2024) - version 0.4.9

- everything is temporary now unless specified;
- created a "exists" file in bin to ensure that the bin folder exists;
- created TYPE_OTHER to handle unknown types;
- TYPE_POINTER and all related stuff were removed;
- added a integer parameter to the Value union;
- removed temp operator ($);
- removed pointer operator (@);
- some conditions related fixes;
- spawn functions now return the index;
- new function hold_var and std_hold;
- new function unhold_var and std_unhold;

(12/09/2024) - version 0.4.8c

- some README updates;
- removed function std_new;
- removed function std_temp;
- renamed function std_print to std_io_print;
- renamed function std_ls to std_io_ls;

(11/09/2024) - version 0.4.8b

- new function std_loop_while;
- new function std_loop_repeat;
- new function std_edit;
- new function std_change;
- fixed some condition related bugs;

(10/09/2024) - version 0.4.8a

- created a new ls argument, "temp", that lists all temp variables;
- std_delete renamed to std_rm;
- new function std_size;
- new function std_sweep;
- new function std_rebase;

(09/09/2024) - version 0.4.8

- some README updates;
- specialSplit renamed to special_space_split;
- added a new function special_split which splits by a given char;
- fixed string splitters;
- fixed eval function;
- all functions were renamed from pascalCase to snake_case for consistency and better readability;
- Variable type and everything related to it was removed;
- VariableList type and everything related to it was removed;
- List type renamed to ValueList;
- specific Int and Float types macros for specific architeture were added;
- removed bruter.txt;

(09/09/2024) - version 0.4.7

- functions will now get indexes instead of Variables;
- added temp variables;
- added temp and clear function;
- added temp operator "$";

(07/09/2024) - version 0.4.6a 

- fixed "set" function related leaks;
- created this file;