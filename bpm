#!/bin/bash

# usage function
usage() 
{
    echo "[=°-°=]: usage: $0 [install|install-from|remove] [package]"
    echo "[=°~°=]: install: install a package from the repository"
    echo "[=°~°=]: install-from: install a package from a custom repository"
}

# store current path
ORIGIN=$(pwd)

# check if sudo is available
SUDO=sudo
if ! command -v sudo >/dev/null; then
    SUDO=""
fi

# default values
if [[ -z "$CC" ]]; then
    CC="gcc -O3"
fi

REPO="https://brutopolis.github.io/packages"
PACKAGE=""

# action flags
_INSTALL=0
SKIP_FILES=0

# files function
files() 
{
    # if SKIP_FILES is 0
    if [[ $SKIP_FILES -eq 1 ]]; then
        return 0
    fi

    if [[ $# -eq 0 ]]; then
        echo "[=°~°=]: no files specified"
        exit 1
    fi

    FILES="$@"

    for file in $FILES
    do
    {
        # download the file
        curl -sLO "$REPO/$PACKAGE/$file"
        if [[ ! -f "$file" ]]; then
            echo "[=°~°=]: failed to fetch $file"
            exit 1
        fi
    }
    done
}

name() 
{
    if [[ $# -eq 0 ]]; then
        echo "[=°~°=]: no name specified"
        exit 1
    fi

    NAME="$1"
}

version() 
{
    if [[ $# -eq 0 ]]; then
        echo "[=°~°=]: no version specified"
        exit 1
    fi

    VERSION="$1"
}

description() 
{
    if [[ $# -eq 0 ]]; then
        echo "[=°~°=]: no description specified"
        exit 1
    fi

    DESCRIPTION="$1"
}

setup() 
{
    if [[ $# -eq 0 ]]; then
        echo "[=°~°=]: no setup command specified"
        exit 1
    fi

    SETUP="$1"
}

# read command
case $1 in

# this creates the .bpm folder
install)  { _INSTALL=1; shift; } ;;
install-from) { _INSTALL=1; REPO=$2; shift 2; } ;;
# help command
help)   { usage; exit 0; } ;;
*) 
{
    source package.sh
    # verify if the first argument is a valid command
    if [[ -z "$1" ]]; then
        echo "[=°~°=]: command not found"
        usage
    else 
        # we assume the first argument is a function name
        "$1" "$@"
    fi
        
    exit 1
}
;;
esac

# handle install
if [[ $_INSTALL -eq 1 ]]; then
{
    # create local build folder if needed
    if [[ ! -d .bpm ]]; then
        mkdir -p .bpm
    fi

    cd .bpm

    if [[ $# -eq 0 ]]; then
        echo "[=°~°=]: no package specified"
        exit 1
    fi

    for PACKAGE in "$@"
    do
    {
        # remove existing package folder if exists
        if [[ -d "$PACKAGE" ]]; then
            rm -rf "$PACKAGE"
        fi

        mkdir "$PACKAGE"
        cd "$PACKAGE"

        # download package.sh and validate
        curl -sLO "$REPO/$PACKAGE/package.sh"
        if [[ ! -f "package.sh" ]]; then
            echo "[=°~°=]: failed to fetch package.sh for $PACKAGE"
            exit 1
        fi

        source package.sh
        setup

        cd ..
    }
    done
}
fi
